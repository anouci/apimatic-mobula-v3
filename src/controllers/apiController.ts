/**
 * MobulaLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { SearchResponse, searchResponseSchema } from '../models/searchResponse';
import { boolean, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ApiController extends BaseController {
  /**
   * @param name Name or symbol (or starting name/symbol) of the asset
   * @return Response from the API call
   */
  async fetchCryptoDataByName(
    name?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SearchResponse>> {
    const req = this.createRequest('GET', '/search');
    const mapped = req.prepareArgs({ name: [name, optional(string())] });
    req.query('name', mapped.name);
    return req.callAsJson(searchResponseSchema, requestOptions);
  }

  /**
   * @param wallet Wallet address or ENS or Mobula username
   * @param force  Will force a new on-chain data fetch
   * @return Response from the API call
   */
  async fetchWalletNFTs(
    wallet?: string,
    force?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/wallet/nfts');
    const mapped = req.prepareArgs({
      wallet: [wallet, optional(string())],
      force: [force, optional(boolean())],
    });
    req.query('wallet', mapped.wallet);
    req.query('force', mapped.force);
    return req.call(requestOptions);
  }
}
